#!/usr/bin/env python3

import json
import argparse
import os

parser = argparse.ArgumentParser()
parser = argparse.ArgumentParser(description="add a new syncd rule")
parser.add_argument("source", help="file/location to sync from")
parser.add_argument("destination", help="file/location to sync to")
parser.add_argument("--rules", help="Specify an alternative rules file to use")
parser.add_argument("-v", "--verbose", action="store_true", default=False, help="Specify an increased verbosity level")
directionGroup = parser.add_mutually_exclusive_group()
directionGroup.add_argument("--monodirectional", action="store_true")

args = parser.parse_args()

#TODO handle new dest on existing src
#TODO allow different old/new rules files?

#first, pick a rules.json to use
#this really should be a function in a utility class
if args.rules:
	rulesFile = args.rules
else:
	userConfigDir = os.getenv('XDG_CONFIG_HOME', default=os.path.join(os.path.expanduser('~'), '.config'))
	syncdConfigDir = os.path.join(userConfigDir, "syncd")
	#rulesFile = "/tmp/rules.json"
	rulesFile = os.path.join(syncdConfigDir, "rules.json")
if args.verbose:
	print("Using", args.rules, "as rules file")

#get the new rule from the command line
newSrc = args.source
newDest = args.destination
#newDests = [args.destination]
#handle raw filesystem location
if newSrc[0] == "/": #FIXME It would be nice if this worked on Windows
	newSrc = "file://" + newSrc
if args.verbose:
	print("Adding new rule:")
	if args.monodirectional:
		print(newSrc, "->", [newDest])
		print("monodirectionally")
	else:
		print(newSrc, "->", [newDest])
		print(newDest, "->", [newSrc])
		print("bidirectionally")

#load existing rules
oldRulesFile = open(rulesFile)
myJsonArray= json.loads(oldRulesFile.read())
oldRulesFile.close()

if args.verbose:
	print("Original rules:")
	print(myJsonArray)

#make our alteration
if args.monodirectional:
	myJsonArray[newSrc] = [newDest]
else:
	myJsonArray[newSrc] = [newDest]
	myJsonArray[newDest] = [newSrc]
if args.verbose:
	print("New rules:")
	print(myJsonArray)

#output new rules file
#open("testOut.json").write(json.dumps(myJsonArray))
newRulesFile = open(rulesFile, "w")
newRulesFile.write(json.dumps(myJsonArray, indent=3))
newRulesFile.close()

#announce our victory
print("All done!")
